<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二分查找leetcode704(基础)</title>
      <link href="/2024/09/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(%E5%9F%BA%E7%A1%80)/"/>
      <url>/2024/09/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(%E5%9F%BA%E7%A1%80)/</url>
      
        <content type="html"><![CDATA[<h4 id="二分查找-基础"><a href="#二分查找-基础" class="headerlink" title="二分查找(基础)"></a>二分查找(基础)</h4><h5 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a>适用情况</h5><blockquote><p>有序数组，无重复元素</p></blockquote><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><blockquote><p>左闭右开，左闭右闭</p></blockquote><h5 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h5><h6 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h6><img src="/images/leetcode704.png" alt="16" style="zoom:100%;" align="left"/><h6 id="写法1"><a href="#写法1" class="headerlink" title="写法1"></a>写法1</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* num,<span class="type">int</span> numsSize,<span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = numsSize;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> middle = (right+left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; num[middle])&#123;</span><br><span class="line">            right = middle;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &gt; num[middle])&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="写法2"><a href="#写法2" class="headerlink" title="写法2"></a>写法2</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> left,<span class="type">int</span> right,<span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> middle = (right + left)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(target == nums[middle])</span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    <span class="keyword">if</span>(target &lt; nums[middle])&#123;</span><br><span class="line">        <span class="keyword">return</span> binarySearch(nums,left,middle,target);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> binarySearch(nums,middle + <span class="number">1</span>,right,target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> binarySearch(nums,<span class="number">0</span>,numsSize,target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>越界避免：可以将  <code>middle == (left + right)/2</code>  改成  <code>middle = right - (right - left)/2</code>  ，但是同时会增加运行时间。</p><p>（整数计算过程中也不能超过  <code>int</code>  的范围）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找leetcode69(x的平方根)</title>
      <link href="/2024/09/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9)/"/>
      <url>/2024/09/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9)/</url>
      
        <content type="html"><![CDATA[<h4 id="二分查找-x的平方根"><a href="#二分查找-x的平方根" class="headerlink" title="二分查找(x的平方根)"></a>二分查找(x的平方根)</h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><img src="/images/leetcode69.png" alt="22" style="zoom:90%;" align="left"/><h5 id="理解关键点"><a href="#理解关键点" class="headerlink" title="理解关键点"></a>理解关键点</h5><blockquote><p>当  <code>middle *  middle &lt;= x</code>  的时候说明middle是潜在的答案，但是答案可能更大，我们要继续往右找，所以先记录  <code>ans = middle</code>  ，再将 left 刷新。</p></blockquote><blockquote><p>为了防止溢出，将  <code>middle *  middle &lt;= x</code>  改为 <code>middle &lt;=  x / middle</code>  </p></blockquote><blockquote><p>这里采用的是左闭右闭，这里注意的是原本  <code>right = x - 1</code>   改成了 <code>right == x</code>  (左闭右开同理)<br>区分基础二分法，因为基础中是基于数组的，最末下标是  <code>numsSize - 1</code>  ，本题不存在下标越界，最末就是 x ，左闭右开，<code>right == x + 1</code> ，左闭右闭，<code>right = x</code> </p></blockquote><h5 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> left = <span class="number">1</span>, right = x, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid &lt;= x / mid) &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找leetcode367(有效的完全平方数)</title>
      <link href="/2024/09/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0)/"/>
      <url>/2024/09/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0)/</url>
      
        <content type="html"><![CDATA[<h4 id="二分查找-有效的完全平方数-、"><a href="#二分查找-有效的完全平方数-、" class="headerlink" title="二分查找(有效的完全平方数)、"></a>二分查找(有效的完全平方数)、</h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><img src="/images/leetcode367.png" alt="23" style="zoom:100%;" align="left"/><h5 id="理解关键点"><a href="#理解关键点" class="headerlink" title="理解关键点"></a>理解关键点</h5><p>这道题主要是防止溢出 <code>long long ride = (long long)middle * middle</code>  ，还有就是  <code>int middle = right - (right - left)/2</code>  ，要思考的点在于，什么时候用 <code>right - (right - left)/2</code>  代替  <code>(right + left)/2</code>  ，注意根据具体题目判断是否会越 <code>int</code> 界</p><h5 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 排除非正数的情况</span></span><br><span class="line">    <span class="type">int</span> left = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right = num;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> middle = right - (right - left)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ride = (<span class="type">long</span> <span class="type">long</span>)middle * middle;</span><br><span class="line">        <span class="keyword">if</span>(ride == num)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ride &lt; num)&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找leetcode35(搜索插入位置)</title>
      <link href="/2024/09/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE)/"/>
      <url>/2024/09/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE)/</url>
      
        <content type="html"><![CDATA[<h4 id="二分查找-搜索插入位置"><a href="#二分查找-搜索插入位置" class="headerlink" title="二分查找(搜索插入位置)"></a>二分查找(搜索插入位置)</h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><img src="/images/leetcode35.png" alt="17" style="zoom:80%;" align="left"/><h5 id="理解关键点"><a href="#理解关键点" class="headerlink" title="理解关键点"></a>理解关键点</h5><blockquote><p>要是没有找到，哪一个才是插入坐标？(主要针对左闭右开)</p></blockquote><p>没有找到时，left是等于right的，其实是等于上一次的middle的(二分查找过程中是逼近target的过程)，上一次的middle就是target，所以没找到时，应当返回right或者left+1</p><h5 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = numsSize;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> middle = (right + left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums [middle] == target)</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; nums[middle])&#123;</span><br><span class="line">            right = middle;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除元素leetcode27(基础)</title>
      <link href="/2024/09/25/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0(%E5%9F%BA%E7%A1%80)/"/>
      <url>/2024/09/25/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0(%E5%9F%BA%E7%A1%80)/</url>
      
        <content type="html"><![CDATA[<h4 id="移除元素-基础"><a href="#移除元素-基础" class="headerlink" title="移除元素(基础)"></a>移除元素(基础)</h4><h5 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a>适用情况</h5><blockquote><p>数组，移除指定内容的元素</p></blockquote><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><blockquote><p>暴力解法，遍历，找到元素就将后一个内容赋给前一个</p></blockquote><blockquote><p>快慢指针法，遍历，任何时候都将快指针前移，没有找到元素的时候，快指针内容赋值给慢指针，慢指针前移</p></blockquote><p>​     <a href="https://www.bilibili.com/video/BV1ep4y1S7zv?vd_source=67ccdc6b6c70370ff009abdf5c7dc2d3">https://www.bilibili.com/video/BV1ep4y1S7zv?vd_source=67ccdc6b6c70370ff009abdf5c7dc2d3</a> ( 1分55 )<br>   【Leetcode 27 移除元素 【快慢指针】】</p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><img src="/images/leetcode27.png" alt="24" align="left"/><h5 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h5><h6 id="解法1-暴力"><a href="#解法1-暴力" class="headerlink" title="解法1(暴力)"></a>解法1(暴力)</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;<span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">if</span>(nums[i] == val)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;<span class="comment">//如果找到一样的，那么后面的元素依次往前移动</span></span><br><span class="line">                nums[j<span class="number">-1</span>] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">            i--;<span class="comment">//下标i以后的数值都向前移动了一位，i也要往前移动一位</span></span><br><span class="line">            numsSize--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numsSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="解法2-快慢指针法"><a href="#解法2-快慢指针法" class="headerlink" title="解法2(快慢指针法)"></a>解法2(快慢指针法)</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">   <span class="type">int</span> fast_index = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> slow_index = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(fast_index=<span class="number">0</span>;fast_index&lt;numsSize;fast_index++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fast_index] != val)&#123;</span><br><span class="line">            nums[slow_index] = nums[fast_index];</span><br><span class="line">            slow_index++;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> slow_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 快慢指针 </tag>
            
            <tag> 移除元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找leetcode34(查找元素的第一个和最后一个位置)</title>
      <link href="/2024/09/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE)/"/>
      <url>/2024/09/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE)/</url>
      
        <content type="html"><![CDATA[<h4 id="二分查找-查找元素的第一个和最后一个位置"><a href="#二分查找-查找元素的第一个和最后一个位置" class="headerlink" title="二分查找(查找元素的第一个和最后一个位置)"></a>二分查找(查找元素的第一个和最后一个位置)</h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><img src="/images/leetcode34.png" alt="21" style="zoom:60%;" /><h5 id="理解关键点"><a href="#理解关键点" class="headerlink" title="理解关键点"></a>理解关键点</h5><p>两种方向：</p><ol><li>通过基础的二分法找到target然后左右扩散，找到最左和最右(第一步二分，第二步遍历，适用于target重复数量不是特别大)</li><li>将  <code>nums[middle]==target</code>  的时候不返回，继续收缩(全是二分法，适用于target重复数量很大</li></ol><p>​寻找左边界的时候，<code>nums[middle]==target</code>  不能停止，因为左边也许还有，所以要继续收缩右边界</p><p>​同理，寻找右边界时，找到了相等还应当继续收缩左边界</p><h5 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h5><h6 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">findTarget</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> numsSize,<span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = numsSize;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> middle = (right + left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(target == nums[middle])&#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; nums[middle])&#123;</span><br><span class="line">            right = middle;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>* <span class="title function_">findBorder</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> border,<span class="type">int</span>* result)</span>&#123;</span><br><span class="line">    result[<span class="number">0</span>] = border;</span><br><span class="line">    result[<span class="number">1</span>] = border;</span><br><span class="line">    <span class="type">int</span> leftBorder = border;</span><br><span class="line">    <span class="type">int</span> rightBorder = border;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(border != <span class="number">0</span>)&#123;<span class="comment">//需要找左边的情况</span></span><br><span class="line">        <span class="keyword">while</span>(leftBorder &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[leftBorder] != target)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            leftBorder--;</span><br><span class="line">        &#125;</span><br><span class="line">        result[<span class="number">0</span>] = leftBorder + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(border != numsSize - <span class="number">1</span>)&#123;<span class="comment">//需要找右边的情况</span></span><br><span class="line">        <span class="keyword">while</span>(rightBorder &lt; numsSize)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[rightBorder] != target)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            rightBorder++;</span><br><span class="line">        &#125;</span><br><span class="line">        result[<span class="number">1</span>] = rightBorder - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>* <span class="title function_">searchRange</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span> &#123;</span><br><span class="line">   * returnSize = <span class="number">2</span>;</span><br><span class="line">   <span class="type">int</span>* result = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);</span><br><span class="line">   result[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">   result[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">   <span class="type">int</span> target0 = findTarget(nums,numsSize,target);</span><br><span class="line">   <span class="keyword">if</span>(target0 == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> findBorder(nums,numsSize,target,target0,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">findFirst</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> numsSize,<span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = numsSize;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> middle = (left + right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(target &gt; nums[middle])&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; numsSize &amp;&amp; nums[left] == target)&#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">findLast</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> numsSize,<span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = numsSize;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> middle = (right + left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; nums[middle])&#123;</span><br><span class="line">            right = middle;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(right &gt; <span class="number">0</span> &amp;&amp; nums[right - <span class="number">1</span>] == target)&#123;</span><br><span class="line">        <span class="keyword">return</span> right - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>* <span class="title function_">searchRange</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span> &#123;</span><br><span class="line">   *returnSize = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span>* result = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">2</span>);</span><br><span class="line">   result[<span class="number">0</span>] = findFirst(nums,numsSize,target);</span><br><span class="line">   result[<span class="number">1</span>] = findLast(nums,numsSize,target);</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除元素leetcode844(比较含退格元素的字符串)</title>
      <link href="/2024/09/25/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0(%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2)/"/>
      <url>/2024/09/25/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0(%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2)/</url>
      
        <content type="html"><![CDATA[<h4 id="移除元素-比较含退格的字符串"><a href="#移除元素-比较含退格的字符串" class="headerlink" title="移除元素(比较含退格的字符串)"></a>移除元素(比较含退格的字符串)</h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><img src="/images/leetcode844.png" alt="3" style="zoom:90%;" align="left"/><h5 id="理解关键点"><a href="#理解关键点" class="headerlink" title="理解关键点"></a>理解关键点</h5><blockquote><p>其实思路都是得到处理后的字符串进行比较，不同点就在于怎样处理字符串</p></blockquote><ol><li>每个字符串两个空间，一个用来遍历判断，一个用来存放处理后的字符</li></ol><p>​如果是退格符，就栈顶弹出；如果是普通字符，就压入栈中</p><ol start="2"><li><p>双指针</p><p>在原本的空间基础上进行处理。如果快指针不指向退格符，就将所指字符赋给慢指针指向的空间；如果快指针指向退格符，说明需要将慢指针所指向的内容删除就，慢指针后退，这里有一个易错点就是慢指针退到零了就退不了了，要注意下标不要越界。</p></li></ol><h5 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h5><h6 id="解法1-两个数组空间"><a href="#解法1-两个数组空间" class="headerlink" title="解法1(两个数组空间)"></a>解法1(两个数组空间)</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">build</span><span class="params">(<span class="type">char</span>* str)</span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">strlen</span>(str), len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* ret = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (n + <span class="number">1</span>)); <span class="comment">//多一个用来存放终止符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            ret[len++] == str[i];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ret[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">backspaceCompare</span><span class="params">(<span class="type">char</span>* s, <span class="type">char</span>* t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(build(s),build(t)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="解法2-双指针-一个空间"><a href="#解法2-双指针-一个空间" class="headerlink" title="解法2(双指针,一个空间)"></a>解法2(双指针,一个空间)</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">build</span><span class="params">(<span class="type">char</span>* str)</span>&#123;</span><br><span class="line">    <span class="type">int</span> fastIndex = <span class="number">0</span>, slowIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(fastIndex; str[fastIndex] != <span class="string">&#x27;\0&#x27;</span>; fastIndex++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[fastIndex] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            str[slowIndex++] = str[fastIndex];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(slowIndex &gt; <span class="number">0</span>)&#123;<span class="comment">//这里的判断条件容易忽略</span></span><br><span class="line">            slowIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str[slowIndex] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">backspaceCompare</span><span class="params">(<span class="type">char</span>* s, <span class="type">char</span>* t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(build(s), build(t)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 快慢指针 </tag>
            
            <tag> 移除元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除元素leetcode26(删除有序数组中的重复项)</title>
      <link href="/2024/09/25/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0(%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9)/"/>
      <url>/2024/09/25/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0(%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9)/</url>
      
        <content type="html"><![CDATA[<h4 id="移除元素-删除有序数组中的重复项"><a href="#移除元素-删除有序数组中的重复项" class="headerlink" title="移除元素(删除有序数组中的重复项)"></a>移除元素(删除有序数组中的重复项)</h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><img src="D:\Typora\Arithmetic\Array\RemovedElement\picture\2024.7\25.png" alt="25" style="zoom:50%;" align="left" /><h5 id="理解关键点"><a href="#理解关键点" class="headerlink" title="理解关键点"></a>理解关键点</h5><blockquote><p>与基础双指针相比，本题为什么  <code>fastIndex = 1</code>   而不等于0，为什么先  <code>slowIndex++</code> 后赋值</p></blockquote><p>​     基础的给定了一个target，fast从零开始排查，而本题，是删除重复元素，不用排查第一个</p><h5 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h5><h6 id="正确解答"><a href="#正确解答" class="headerlink" title="正确解答"></a>正确解答</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> fastIndex = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> slowIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(fastIndex;fastIndex&lt;numsSize;fastIndex++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fastIndex] != nums[slowIndex])&#123;</span><br><span class="line">            slowIndex++;</span><br><span class="line">            nums[slowIndex] = nums[fastIndex];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slowIndex+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="错误解答"><a href="#错误解答" class="headerlink" title="错误解答"></a>错误解答</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> fastIndex = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> slowIndex = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(fastIndex;fastIndex&lt;numsSize;fastIndex++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fastIndex] != nums[slowIndex])&#123;</span><br><span class="line">            nums[slowIndex] = nums[fastIndex];</span><br><span class="line">            slowIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slowIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="正误对比分析"><a href="#正误对比分析" class="headerlink" title="正误对比分析"></a>正误对比分析</h6><blockquote><p>本题没有给target，所以需要自行判断target，我们采用的方法就是后者比较前者，所以fast和slow要有差</p></blockquote><p>​     虽然两种解答乍一看是一样的，但是错误解答中就忽略了二者必须有差这一点</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 移除元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除元素leetcode283(移动零)</title>
      <link href="/2024/09/25/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0(%E7%A7%BB%E5%8A%A8%E9%9B%B6)/"/>
      <url>/2024/09/25/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0(%E7%A7%BB%E5%8A%A8%E9%9B%B6)/</url>
      
        <content type="html"><![CDATA[<h4 id="移除元素-移动零"><a href="#移除元素-移动零" class="headerlink" title="移除元素(移动零)"></a>移除元素(移动零)</h4><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><img src="/images/leetcode283.png" alt="26" style="zoom:50%;" align="left"/><h5 id="理解关键点"><a href="#理解关键点" class="headerlink" title="理解关键点"></a>理解关键点</h5><blockquote><p>为什么要调换位置</p></blockquote><p>​     遍历时，如果没有遍历过0元素，那么fast和slow指针的位置始终相同，交换位置不会影响结果。一旦遍历过0元素，那么slow就停到最左边零的位置，此时当right遍历到非零元素时，就会和最左边的零互换。</p><h5 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h5><h6 id="解答1-双循环"><a href="#解答1-双循环" class="headerlink" title="解答1(双循环)"></a>解答1(双循环)</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> fastIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> slowIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(fastIndex;fastIndex&lt;numsSize;fastIndex++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fastIndex] != <span class="number">0</span>)&#123;</span><br><span class="line">            nums[slowIndex] = nums[fastIndex];</span><br><span class="line">            slowIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(slowIndex;slowIndex&lt;numsSize;slowIndex++)&#123;</span><br><span class="line">        nums[slowIndex] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="解答2-单循环"><a href="#解答2-单循环" class="headerlink" title="解答2(单循环)"></a>解答2(单循环)</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="type">int</span> fastIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> slowIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(fastIndex;fastIndex&lt;numsSize;fastIndex++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fastIndex] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> temp;</span><br><span class="line">            temp = nums[fastIndex];</span><br><span class="line">            nums[fastIndex] = nums[slowIndex];</span><br><span class="line">            nums[slowIndex] = temp;</span><br><span class="line">            slowIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 快慢指针 </tag>
            
            <tag> 移除元素 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
